--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_FanCTRL.v
  top_module:  "tt_um_FanCTRL_DomnikBrandstetter"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Dominik Brandstetter"      # Your name
  title:        "PI-Based Fan Controller"  # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "PI-Based FAN-Speed controller" # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |

      This project involves reading a 4-bit ADC value through a dedicated interface. 
      Another a 4-bit interface allows the user to set the desired target value. 
      The integrated controller, designed with fixed parameters, regulates the fan speed 
      through a PWM (Pulse Width Modulation) output operating at approximately 25 kHz. 
      The controller maintains a minimum duty cycle of around 20%, and it has the capability 
      to increase this value up to 100%. The output consists of a signed 4-bit controller value 
      along with the corresponding PWM signal. Additionally, the current controller value can be read from 
      the 7-Segment-Display. This configuration ensures precise control and adjustment of the 
      fan speed based on the input parameters provided through the 4-bit interfaces, 
      with the added feature of fixed controller parameters for simplicity and stability.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset, the fan controller should initiate operation, adjusting the fan speed based on the setpoint and ADC value. 
      The PWM output, set at approximately 25 kHz, regulates the fan speed.
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - ADC_BIT_0
    - ADC_BIT_1
    - ADC_BIT_2
    - ADC_BIT_3
    - SET_BIT_0
    - SET_BIT_1
    - SET_BIT_2
    - SET_BIT_3
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - segment a
    - segment b
    - segment c
    - segment d
    - segment e
    - segment f
    - segment g
    - PWM Output
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - Controller_SET_BIT_0
    - Controller_SET_BIT_1
    - Controller_SET_BIT_2
    - Controller_SET_BIT_3
    - Controller_SIGN_BIT_4
    - GND
    - GND
    - GND

# The following fields are optional
  tag:          "pid, pwm"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
